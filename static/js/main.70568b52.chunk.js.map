{"version":3,"sources":["components/Card.js","components/Dots.js","components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","image","className","src","alt","Dot","activeIndex","index","handlerCheckSlide","onClick","slides","map","slide","i","key","Carousel","props","widthResize","setState","state","widthCard","cardContainer","children","offsetWidth","moveCard","currentCard","slideShow","change","handleNext","handlePrevios","length","newCurrentCard","setTimeout","handleAutorun","timerId","clearInterval","setInterval","checkSlide","transitionDuration","transform","style","start","setCardContainer","element","setViewPort","viewPort","firstCardClone","this","cloneNode","lastCardClone","container","addEventListener","e","clientX","preventDefault","touch","touches","insertBefore","append","window","removeEventListener","ref","images","PureComponent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70568b52.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Card({ image }) {\r\n    return (\r\n        <div className=\"card\">\r\n            <img className=\"card__image\" src={image} alt=\"hey\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nCard.propTypes = {\r\n    image: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default React.memo(Card);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Dots = ({ slides, activeIndex, handlerCheckSlide }) => (\r\n    <div className=\"carousel__dots\">\r\n        {slides.map((slide, i) => (\r\n            <Dot\r\n                key={slide}\r\n                activeIndex={activeIndex}\r\n                index={i}\r\n                handlerCheckSlide={handlerCheckSlide}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nconst Dot = React.memo(function Dot({ activeIndex, index, handlerCheckSlide }) {\r\n    return (\r\n        <>\r\n            <span\r\n                onClick={() => handlerCheckSlide(index)}\r\n                className={activeIndex === index ? 'carousel__dot active' : 'carousel__dot'}></span>\r\n        </>\r\n    );\r\n});\r\n\r\nDots.propTypes = {\r\n    slides: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    activeIndex: PropTypes.number.isRequired,\r\n    handlerCheckSlide: PropTypes.func.isRequired,\r\n};\r\n\r\nDot.propTypes = {\r\n    activeIndex: PropTypes.number.isRequired,\r\n    handlerCheckSlide: PropTypes.func.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default React.memo(Dots);\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from './Card';\r\nimport Dots from './Dots';\r\n\r\nexport class Carousel extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // initial state\r\n        this.state = {\r\n            currentCard: 1,\r\n            widthCard: null,\r\n            timerId: null,\r\n            start: null,\r\n            change: null,\r\n        };\r\n\r\n        // refereces\r\n        this.setCardContainer = (element) => {\r\n            this.cardContainer = element;\r\n        };\r\n\r\n        this.setViewPort = (element) => {\r\n            this.viewPort = element;\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        images: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    };\r\n\r\n    componentDidMount() {\r\n        // creating fake cards\r\n        let firstCardClone = this.cardContainer.children[0].cloneNode(true);\r\n        let lastCardClone = this.cardContainer.children[\r\n            this.cardContainer.children.length - 1\r\n        ].cloneNode(true);\r\n\r\n        // add event listeners for Drag and Drop effects (desctop mouse)\r\n        const container = this.viewPort;\r\n\r\n        container.addEventListener('dragstart', (e) => {\r\n            this.setState({\r\n                ...this.state,\r\n                start: e.clientX,\r\n            });\r\n        });\r\n        container.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            let touch = e.clientX;\r\n            this.setState({\r\n                ...this.state,\r\n                change: this.state.start - touch,\r\n            });\r\n        });\r\n        container.addEventListener('dragend', () => {\r\n            this.slideShow(this.state.change);\r\n        });\r\n\r\n        // add event listeners for Touch effects (mobile)\r\n        container.addEventListener('touchstart', (e) => {\r\n            this.setState({\r\n                ...this.state,\r\n                start: e.touches[0].clientX,\r\n            });\r\n        });\r\n        container.addEventListener('touchmove', (e) => {\r\n            e.preventDefault();\r\n            let touch = e.touches[0];\r\n            this.setState({\r\n                ...this.state,\r\n                change: this.state.start - touch.clientX,\r\n            });\r\n        });\r\n        container.addEventListener('touchend', () => {\r\n            this.slideShow(this.state.change);\r\n        });\r\n\r\n        // initial change state\r\n        this.setState(\r\n            {\r\n                ...this.state,\r\n                widthCard: this.cardContainer.children[0].offsetWidth,\r\n            },\r\n            () => {\r\n                this.cardContainer.insertBefore(lastCardClone, this.cardContainer.children[0]);\r\n                this.cardContainer.append(firstCardClone);\r\n\r\n                this.moveCard(0.0, this.state.widthCard);\r\n            },\r\n        );\r\n\r\n        // add event listener for resize\r\n        window.addEventListener('resize', this.widthResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // remove listeners\r\n        const container = this.viewPort;\r\n\r\n        container.removeEventListener('dragstart', (e) => {\r\n            this.setState({\r\n                ...this.state,\r\n                start: e.clientX,\r\n            });\r\n        });\r\n        container.removeEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            let touch = e.clientX;\r\n            this.setState({\r\n                ...this.state,\r\n                change: this.state.start - touch,\r\n            });\r\n        });\r\n        container.removeEventListener('dragend', () => {\r\n            this.slideShow(this.state.change);\r\n        });\r\n\r\n        // add event listeners for Touch effects (mobile)\r\n        container.removeEventListener('touchstart', (e) => {\r\n            this.setState({\r\n                ...this.state,\r\n                start: e.touches[0].clientX,\r\n            });\r\n        });\r\n        container.removeEventListener('touchmove', (e) => {\r\n            e.preventDefault();\r\n            let touch = e.touches[0];\r\n            this.setState({\r\n                ...this.state,\r\n                change: this.state.start - touch.clientX,\r\n            });\r\n        });\r\n        container.removeEventListener('touchend', () => {\r\n            this.slideShow(this.state.change);\r\n        });\r\n\r\n        window.removeEventListener('resize', this.widthResize);\r\n    }\r\n\r\n    // method for adaptive change slider\r\n    widthResize = () => {\r\n        this.setState(\r\n            {\r\n                ...this.state,\r\n                widthCard: this.cardContainer.children[0].offsetWidth,\r\n            },\r\n            () => {\r\n                this.moveCard(0.0, this.state.widthCard * this.state.currentCard);\r\n            },\r\n        );\r\n    };\r\n\r\n    // method for move slides with swipe effect\r\n    slideShow = (change) => {\r\n        if (change > 0) {\r\n            this.handleNext();\r\n        } else {\r\n            this.handlePrevios();\r\n        }\r\n    };\r\n\r\n    // move to the next slide\r\n    handleNext = () => {\r\n        if (this.state.currentCard < this.cardContainer.children.length - 1) {\r\n            let newCurrentCard = this.state.currentCard + 1;\r\n\r\n            this.setState(\r\n                {\r\n                    ...this.state,\r\n                    currentCard: newCurrentCard,\r\n                },\r\n                () => {\r\n                    this.moveCard(0.5, this.state.widthCard * this.state.currentCard);\r\n\r\n                    if (this.state.currentCard === this.cardContainer.children.length - 1) {\r\n                        setTimeout(() => {\r\n                            this.setState(\r\n                                {\r\n                                    ...this.state,\r\n                                    currentCard: 1,\r\n                                },\r\n                                () => this.moveCard(0.0, this.state.widthCard),\r\n                            );\r\n                        }, 502);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    // move to the previos slide\r\n    handlePrevios = () => {\r\n        if (this.state.currentCard > 0) {\r\n            let newCurrentCard = this.state.currentCard - 1;\r\n\r\n            this.setState(\r\n                {\r\n                    ...this.state,\r\n                    currentCard: newCurrentCard,\r\n                },\r\n                () => {\r\n                    this.moveCard(0.5, this.state.widthCard * this.state.currentCard);\r\n\r\n                    if (this.state.currentCard === 0) {\r\n                        setTimeout(() => {\r\n                            this.setState(\r\n                                {\r\n                                    ...this.state,\r\n                                    currentCard: this.cardContainer.children.length - 2,\r\n                                },\r\n                                () =>\r\n                                    this.moveCard(\r\n                                        0.0,\r\n                                        this.state.widthCard *\r\n                                            (this.cardContainer.children.length - 2),\r\n                                    ),\r\n                            );\r\n                        }, 502);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    // method for run and stop autorun\r\n    handleAutorun = () => {\r\n        if (!this.state.timerId) {\r\n            this.setState({\r\n                ...this.state,\r\n                timerId: setInterval(this.handleNext, 2000),\r\n            });\r\n        } else {\r\n            clearInterval(this.state.timerId);\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                timerId: null,\r\n            });\r\n        }\r\n    };\r\n\r\n    // method for change slids by dots\r\n    checkSlide = (index) => {\r\n        this.setState(\r\n            {\r\n                currentCard: index + 1,\r\n            },\r\n            () => {\r\n                this.moveCard(0.5, this.state.widthCard * this.state.currentCard);\r\n            },\r\n        );\r\n    };\r\n\r\n    // method for change transform / transition css props\r\n    moveCard = (transitionDuration, transform) => {\r\n        this.cardContainer.style.transitionDuration = `${transitionDuration}s`;\r\n        this.cardContainer.style.transform = `translate(-${transform}px)`;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"carousel\">\r\n                <div className=\"carousel__controls\">\r\n                    <button onClick={this.handlePrevios} className=\"btn btn-info\">\r\n                        Previous\r\n                    </button>\r\n                    <button onClick={this.handleNext} className=\"btn btn-info\">\r\n                        Next\r\n                    </button>\r\n                    <button onClick={this.handleAutorun} className=\"btn btn-info\">\r\n                        {!this.state.timerId ? 'Autorun' : 'Stop'}\r\n                    </button>\r\n                </div>\r\n                <div className=\"carousel__view-port\" ref={this.setViewPort}>\r\n                    <div ref={this.setCardContainer} className=\"carousel__card-container\">\r\n                        {this.props.images.map((image) => (\r\n                            <Card image={image} key={image} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <Dots\r\n                    slides={this.props.images}\r\n                    activeIndex={this.state.currentCard - 1}\r\n                    handlerCheckSlide={this.checkSlide}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Carousel;\r\n","import React from 'react';\nimport Carousel from './components/Carousel.js';\n\nfunction App({ images }) {\n    return (\n        <div className=\"app\">\n            <Carousel images={images} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/app.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// images for slider\nconst images = [\n    'http://picsum.photos/400/200',\n    'http://picsum.photos/350/200',\n    'http://picsum.photos/500/200',\n    'http://picsum.photos/600/200',\n];\n\nReactDOM.render(\n    <React.StrictMode>\n        <App images={images} />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}